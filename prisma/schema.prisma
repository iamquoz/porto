generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Role {
  roleId Int    @id @default(autoincrement())
  name   String
  user   User[]

  @@map("role")
}

model BlogPost {
  postId   Int      @id @default(autoincrement())
  author   User     @relation(fields: [userId], references: [id])
  postTime DateTime @default(now())
  body     String   @db.Text
  title    String   @db.Text
  userId   String
  active   Boolean  @default(true)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  role              Role                @relation(fields: [roleRoleId], references: [roleId])
  roleRoleId        Int                 @default(6)
  active            Boolean             @default(true)
  BlogPost          BlogPost[]
  Order             Order[]
  Agent             SupportTicket[]     @relation("agent")
  Customer          SupportTicket[]     @relation("customer")
  SupportTicketText SupportTicketText[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AdType {
  AdTypeId Int    @id @default(autoincrement())
  name     String
  Sku      Sku[]
}

model Sku {
  SkuId          Int    @id @default(autoincrement())
  name           String
  price          Float
  type           AdType @relation(fields: [adTypeAdTypeId], references: [AdTypeId])
  adTypeAdTypeId Int
  longitude      Float?
  latitude       Float?
}

model Order {
  OrderId       Int             @id @default(autoincrement())
  user          User            @relation(fields: [userId], references: [id])
  totalPrice    Int
  SkuIds        Int[] // sku ids, but can't have an array with relations
  count         Int[] // count for each of skus
  active        Boolean[] // whether each sku in the order is currently active (hasn't been stopped)
  startDate     DateTime[] // start date for each sku
  userId        String
  SupportTicket SupportTicket[]
}

model TicketStatus {
  StatusId      Int             @id @default(autoincrement())
  name          String
  SupportTicket SupportTicket[]
}

model SupportTicket {
  TicketId             Int                 @id @default(autoincrement())
  agent                User                @relation(fields: [agentId], references: [id], name: "agent", map: "agent_ticket_fkey")
  customer             User                @relation(fields: [customerId], references: [id], name: "customer", map: "customer_ticket_fkey")
  dateStarted          DateTime
  status               TicketStatus        @relation(fields: [ticketStatusStatusId], references: [StatusId])
  dateResolved         DateTime?
  order                Order               @relation(fields: [orderOrderId], references: [OrderId])
  agentId              String
  customerId           String
  ticketStatusStatusId Int
  orderOrderId         Int
  SupportTicketText    SupportTicketText[]
}

model SupportTicketText {
  id                    Int           @id @default(autoincrement())
  author                User          @relation(fields: [userId], references: [id])
  text                  String
  date                  DateTime      @default(now())
  ticket                SupportTicket @relation(fields: [supportTicketTicketId], references: [TicketId])
  userId                String
  supportTicketTicketId Int
}
